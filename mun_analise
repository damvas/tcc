import pandas as pd
import statsmodels.api as sm
from statsmodels.formula.api import ols
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties
import math
from linearmodels.panel import PanelOLS
from linearmodels.panel.results import PanelResults
from tabulate import tabulate

def get_data():
    df = load_raw_database()
    df = get_additional_variables(df)
    df = get_log_and_product_variables(df)
    export_database(df)

def load_raw_database() -> pd.DataFrame:

    df = pd.read_csv(r"C:\Users\danie\Desktop\TCC\Dados\BASE\base_mun_raw.csv", sep = ';', decimal = ',', encoding = 'latin1')

    return df

def get_additional_variables(df: pd.DataFrame) -> pd.DataFrame:

    df['pib_pc'] = df['pib']/df['pop']
    df['exp_pib'] = df['exp']/df['pib']
    df['imp_pib'] = df['imp']/df['pib']
    df['trade'] = df['imp']+df['exp']
    df['trade_pib'] = df['trade']/df['pib']

    return df

def get_log_and_product_variables(df: pd.DataFrame) -> pd.DataFrame:

    for col in ['exp','imp','pop','pib','trade']:
        df[f'l{col}'] = df[col].apply(lambda x:math.log(1 + x))

    for cols in [('trade_pib', 'eci'),('exp_pib','eci'),('imp_pib','eci')]:
        df[f'{cols[0]}_{cols[1]}'] = df[cols[0]]*df[cols[1]]
        
    return df

def export_database(df: pd.DataFrame) -> None:

    df.to_csv(r"C:\Users\danie\Desktop\TCC\Dados\BASE\base_mun.csv", sep = ';', index=False, decimal = '.', encoding = 'latin1')

def load_database() -> pd.DataFrame:
    
    return pd.read_csv(r"C:\Users\danie\Desktop\TCC\Dados\BASE\base_mun.csv", sep = ';', decimal = '.', encoding = 'latin1')

def get_descriptive_stats(df: pd.DataFrame) -> pd.DataFrame:
    desc_stats = df[['gini','eci','exp_pib','imp_pib','trade_pib','exp_pib_eci','imp_pib_eci','trade_pib_eci','pmpob','e_anosestudo','lpib','lpop']].describe().T[['count','mean','std','50%','min','max']]
    desc_stats['count'] = desc_stats['count'].apply(lambda x:round(x))
    desc_stats = desc_stats.round(4)
    desc_stats.index = ['Gini','ICE','Exportações','Importações','Comércio','Exportações * ECI','Importações * ECI','Comércio * ECI','Proporção de pobres','Anos de estudo','Ln(PIB)','Ln(População)']
    desc_stats.columns = ['Observações','Média','Desvio Padrão','Mediana','Mínimo','Máximo']
    desc_stats = desc_stats.reset_index(names='Variável')
    desc_stats = desc_stats.astype(str)
    for col in desc_stats.columns:
        desc_stats[col] = desc_stats[col].str.replace('.',',',regex=False)
    desc_stats.to_csv(r"C:\Users\danie\Desktop\TCC\Dados\tabelas\mun_desc_stat.csv", index = False, sep = ';', encoding='latin1')
    return desc_stats

def get_results_table(df: pd.DataFrame) -> pd.DataFrame:
    # reg gini eci trade_pib  lpib  lpop e_anosestudo  pmpob, robust
    X = df[['eci', 'trade_pib', 'lpib', 'lpop', 'e_anosestudo', 'pmpob']]
    X = sm.add_constant(X)  # Adds a constant (intercept) to the model
    mod1 = sm.OLS(df['gini'], X)
    res1 = mod1.fit(cov_type='HC1')

    # reg gini eci trade_pib trade_pib_eci  lpib  lpop e_anosestudo  pmpob, robust
    X = df[['eci', 'trade_pib', 'trade_pib_eci', 'lpib', 'lpop', 'e_anosestudo', 'pmpob']]
    X = sm.add_constant(X)
    mod2 = sm.OLS(df['gini'], X)
    res2 = mod2.fit(cov_type='HC1') 

    # reg gini eci exp_pib exp_pib_eci  lpib  lpop e_anosestudo  pmpob, robust
    X = df[['eci', 'exp_pib', 'exp_pib_eci', 'lpib', 'lpop', 'e_anosestudo', 'pmpob']]
    X = sm.add_constant(X)
    mod3 = sm.OLS(df['gini'], X)
    res3 = mod3.fit(cov_type='HC1')

    # reg gini eci imp_pib imp_pib_eci  lpib  lpop e_anosestudo  pmpob, robust
    X = df[['eci', 'imp_pib', 'imp_pib_eci', 'lpib', 'lpop', 'e_anosestudo', 'pmpob']]
    X = sm.add_constant(X)
    mod4 = sm.OLS(df['gini'], X)
    res4 = mod4.fit(cov_type='HC1')

    res_table = pd.DataFrame()
    for r in [res1, res2, res3, res4]:
        r_df = pd.DataFrame([r.params, r.HC1_se, r.pvalues])

        r_df['R²'] = r.rsquared

        r_df.columns = pd.Series(r_df.columns).replace({'eci': 'ECI',
                                        'trade_pib_eci': 'Comércio * ECI',
                                        'trade_pib': 'Comércio',
                                        'lpib': 'Ln(PIB)',
                                        'lpop': 'Ln(População)',
                                        'exp_pib': 'Exportações',
                                        'imp_pib': 'Importações',
                                        'exp_pib_eci': 'Exportações * ECI',
                                        'imp_pib_eci': 'Importações * ECI',
                                        'pmpob': 'Proporção de pobres',
                                        'e_anosestudo': 'Anos de estudo',
                                        'const': 'Constante'
                                        })
        
        r_df = r_df.round(4)
        for col in r_df.columns:
            if col not in ['','R²']:
                r_df.loc[0, col] = str(r_df.loc[0, col])
                if r_df.loc[2, col] < 0.1:
                    r_df.loc[0, col] += '*'
                if r_df.loc[2, col] < 0.05:
                    r_df.loc[0, col] += '*'
                if r_df.loc[2, col] < 0.01:
                    r_df.loc[0, col] += '*'

        r_df[''] = ['Coeficiente','Erro Padrão','Valor-p']

        res_table = pd.concat([res_table, r_df])

    cols = [i for i in ['',
                        'Constante',
                        'ECI',
                        'Exportações',
                        'Importações',
                        'Comércio',
                        'Exportações * ECI',
                        'Importações * ECI',
                        'Comércio * ECI',
                        'Proporção de pobres',
                        'Anos de estudo',
                        'Ln(PIB)',
                        'Ln(População)',
                        'R²'] if i in res_table.columns]
    res_table = res_table[cols]
    res_table = res_table.applymap(lambda x:str(x))
    res_table = res_table.applymap(lambda x:'' if x == 'nan' else x)
    res_table = res_table.applymap(lambda x:x.replace('.',','))
    res_table = res_table.T
    res_table = res_table.reset_index()
    res_table.to_csv(r"C:\Users\danie\Desktop\TCC\Dados\tabelas\mun_results_table.csv", sep = ';', encoding='latin1', index = False)
    return res_table
